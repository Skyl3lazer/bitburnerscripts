/** @param {NS} ns **/
import { Server } from "scanall.ns"
export async function main(ns) {
	ns.disableLog("sleep");
	ns.disableLog("getHackingLevel");
	ns.disableLog("getServerMoneyAvailable");
	ns.disableLog("getServerSecurityLevel");
	ns.disableLog("run");
	ns.disableLog("getServerUsedRam");
	ns.tail();
	/*
	Port Mapping:
	Port 1 = Output Order objects
	Port 2 = Input threads put on target
	Port 3 = Input completed orders
	*/
	ns.clearPort(1);
	ns.clearPort(2);
	ns.clearPort(3);
	ns.run("/hack/client.ns");
	//Configuration
	var exclude = ["home", "n00dles", "darkweb", "CSEC", "avmnite-02h", "I.I.I.I", "run4theh111z", ".", "The-Cave"];
	var weight_maxMoney = 10;
	var weight_growth = 2000000;
	var securityThresh = 0; //Don't hack if security is below this threshhold (plus base min)
	var moneyThresh = .65; //Don't hack if money is below maxMoney * moneyThresh
	var maxConcurrent = 4; //Maximum amount of servers you want to concurrently be trying to hack (starting with most efficient)
	var hackThreadThresh = 15000; //Won't run more than this many hack threads at once
	var batchOffset = 5000;//ms to delay between batches in a hwgw
	var maxBatchSize = 99;//How many chained hwhw will be placed on each concurrent server at most
	var namedServerPrefix = "pserv";//The prefix for your custom purchased servers
	//End Configuration

	var ImportServers;
	var orderQueue = new Array();
	var nextOrderID = 1;
	var totalweight = weight_maxMoney + weight_growth;
	weight_maxMoney /= totalweight;
	weight_growth /= totalweight;
	var hackSize = 1.7;
	var weakenSize = 1.75;
	var growSize = 1.75;

	//filter unwanted servers
	var servers;

	await UpdateServers();



	//main loop
	while (true) {

		//read any order acceptance squaks
		let portData = ns.readPort(2);
		while (portData !== "NULL PORT DATA") {
			portData = JSON.parse(portData);
			const ord = orderQueue.find(element => element.id === portData.id);
			if (ord === undefined) {
				portData = ns.readPort(2);
				continue;
			}
			if (portData.startedThreads < ord.neededThreads) {
				if (portData.startedThreads > 0) {
					ns.print("ID " + ord.id + ": " + "Only " + portData.startedThreads + " of needed " + ord.neededThreads + " were started. Requesting " + (ord.neededThreads - portData.startedThreads));
				}
				let writeCheckSquak = false;
				ord.neededThreads -= portData.startedThreads;
				while (!writeCheckSquak) {
					writeCheckSquak = await ns.tryWritePort(1, JSON.stringify(ord));
					await ns.sleep(5);
				}
			} else {
				ns.print("ID " + ord.id + " " + ord.type + " " + ord.target.name + ": Started all " + ord.threads + " threads.");
			}
			portData = ns.readPort(2);
		}
		//read any order completion squaks
		portData = ns.readPort(3);
		while (portData !== "NULL PORT DATA") {
			portData = JSON.parse(portData);
			const ord = orderQueue.find(element => element.id === portData.id);
			if (ord === undefined) {
				portData = ns.readPort(3);
				continue;
			}
			if ((ord.neededThreads - portData.threads) > 0) {
				ord.neededThreads -= portData.threads;
				ns.print("ID " + ord.id + " " + ord.type + " " + ord.target.name + ": Completed " + (ord.threads - ord.neededThreads) + " of " + ord.threads + " threads.");
			} else {

				let updateSrv = ImportServers.find(function (server) { return server.name === portData.server.name });
				updateSrv = portData.server;
				ns.print("ID " + ord.id + " " + ord.type + " " + ord.target.name + ": Completed.");
				orderQueue.splice(orderQueue.indexOf(orderQueue.find(element => element.id == portData.id)), 1);
				await UpdateServers();
			}

			portData = ns.readPort(3);
		}


		//write a new order
		let distictTargets = new Set(orderQueue.filter(order => !order.isBatch).map(a => a.target.name)).size;
		let orderWithBatch3 = orderQueue.filter(function (order) {
			return order.isBatch && order.batchID === 3;
		});
		let ordersWithMoreThanConcurrentBatch3s = orderWithBatch3
			.map(a => a.target.name)
			.filter(name => {
				return orderWithBatch3.filter(order => order.target.name === name && order.batchID === 3).length >= maxBatchSize;
			});
		distictTargets += new Set(ordersWithMoreThanConcurrentBatch3s).size;

		if (distictTargets < maxConcurrent) {
			let orders = await determineOrder();
			if (orders !== "NO ORDER") {
				for (let order of orders) {
					let writeCheckNew = await ns.tryWritePort(1, JSON.stringify(order));
					ns.print("Writing Order " + order.id + ": " + order.type + " " + order.target.name);
					while (!writeCheckNew) {
						await ns.sleep(5);
						writeCheckNew = await ns.tryWritePort(1, JSON.stringify(order));
					}
					orderQueue.push(order);
				}
				if (orders.length > 1) {
					ns.print("Letting those batches process");
					await ns.sleep(50 * orders.length); //Let all those orders get parsed
				}
			}
		}
		await ns.write("orderqueue.txt", JSON.stringify(orderQueue), "w");
		await ns.write("serverlist.txt", JSON.stringify(ImportServers), "w");
		servers = ImportServers.filter(function (server) {
			return !exclude.includes(server.name) && !server.name.startsWith(namedServerPrefix);
		});
		await ns.sleep(500);
	}

	//Determine the order to send next
	async function determineOrder() {
		let hackLevel = ns.getHackingLevel();
		let hackableServers = JSON.parse(JSON.stringify(servers.filter(function (server) {
			return server.hackLevel <= hackLevel
				&& server.hasRoot;
		})));
		if (hackableServers.length === 0) {
			ns.print("No hackables");
			return Promise.resolve("NO ORDER");
		}
		let firstHighScore = 0;
		let firstHighTarget = new Server();
		let threads = 0;
		let type = "";
		hackableServers.forEach(server => {
			server.money = ns.getServerMoneyAvailable(server.name);
			server.security = ns.getServerSecurityLevel(server.name);
			let score = (server.maxMoney * weight_maxMoney) + (server.growth * weight_growth);
			server.hackTime = ns.getHackTime(server.name);
			score /= server.hackTime;
			server.score = score;
			if (score > firstHighScore) {
				firstHighScore = score;
				firstHighTarget = JSON.parse(JSON.stringify(server));
			}
		});
		hackableServers.sort((a, b) => b.score - a.score);

		hackableServers.splice(maxConcurrent);
		if (firstHighTarget.name === undefined) {
			ns.print("No high score");
			return Promise.resolve("NO ORDER");
		}

		var promise = "NO ORDER";
		let freeRamThreads = getFreeRamThreads();

		if (freeRamThreads <= 0) {
			return Promise.resolve("NO ORDER");
		}
		//This is only going to run until it gives an order, it won't execute for every target
		for (let highTarget of hackableServers) {
			var anyHighTargetOrder = orderQueue.filter(function (order) {
				return order.target.name === highTarget.name;
			}).length > 0;
			var anyHighTargetNonBatchedOrder = orderQueue.filter(function (order) {
				return order.target.name === highTarget.name && !order.isBatch;
			}).length > 0;

			if (highTarget.security > highTarget.minSec + securityThresh && !anyHighTargetOrder) {
				type = "w";
				threads = Math.ceil((highTarget.security - (highTarget.minSec + securityThresh)) / 0.05); //0.05 is a static amount reduced per thread

				if (threads <= 0) {
					return Promise.resolve("NO ORDER");
				}
				threads = Math.min(threads, freeRamThreads);
				let ord = new Order(nextOrderID, highTarget, threads, highTarget.minSec + securityThresh, type);
				nextOrderID++;
				return Promise.resolve(new Array(ord)); //return the Order object
			} else if (highTarget.money <= highTarget.maxMoney * moneyThresh && !anyHighTargetOrder) {
				type = "g";
				threads = Math.ceil(ns.growthAnalyze(highTarget.name, highTarget.maxMoney / Math.max(highTarget.money, 1)));

				if (threads <= 0) {
					return Promise.resolve("NO ORDER");
				}
				threads = Math.min(threads, freeRamThreads);
				let ord = new Order(nextOrderID, highTarget, threads, highTarget.minSec + securityThresh, type);
				nextOrderID++;
				return Promise.resolve(new Array(ord)); //return the Order object
			} else if (!anyHighTargetNonBatchedOrder) {
				let orderBatch = new Array();
				type = "h";
				threads = Math.floor(ns.hackAnalyzeThreads(highTarget.name, highTarget.maxMoney * (1 - moneyThresh)));
				if (threads > hackThreadThresh) {
					threads = hackThreadThresh;
				}

				if (threads <= 0) {
					return Promise.resolve("NO ORDER");
				}

				highTarget.growTime = Math.ceil(ns.getGrowTime(highTarget.name));
				highTarget.weakenTime = Math.ceil(ns.getWeakenTime(highTarget.name));
				let hackWait = Math.ceil(highTarget.weakenTime - highTarget.hackTime - batchOffset);
				let growWait = Math.ceil(batchOffset + highTarget.weakenTime - highTarget.growTime);
				let weak2Wait = Math.ceil(batchOffset * 2);

				var sumThreads = threads;
				let startOrderID = nextOrderID;
				let ord = new Order(nextOrderID, highTarget, threads, highTarget.minSec + securityThresh, type);
				ord.isBatch = true;
				nextOrderID++;
				ord.delay = hackWait;

				let calcThreads = 0;
				//add weak1
				calcThreads = Math.ceil((0.002 * threads) / 0.05);
				sumThreads += calcThreads;
				let addweak1 = new Order(nextOrderID, highTarget, calcThreads, highTarget.minSec + securityThresh, "w");
				addweak1.isBatch = true;
				nextOrderID++;
				//add grow
				calcThreads = Math.ceil(1.05 * ns.growthAnalyze(highTarget.name,
					highTarget.maxMoney / (highTarget.money - (ns.hackAnalyze(highTarget.name) * threads * highTarget.money))));
				sumThreads += calcThreads;
				let addgrow = new Order(nextOrderID, highTarget, calcThreads, highTarget.minSec + securityThresh, "g");
				addgrow.isBatch = true;
				nextOrderID++;
				addgrow.delay = growWait;
				//add weak2
				calcThreads = Math.ceil((0.004 * calcThreads) / 0.05);
				sumThreads += calcThreads;
				let addweak2 = new Order(nextOrderID, highTarget, calcThreads, highTarget.minSec + securityThresh, "w");
				addweak2.isBatch = true;
				nextOrderID++;
				addweak2.delay = weak2Wait;

				let maxBatch_freeRam = Math.floor(freeRamThreads / sumThreads);
				let existingBatch = orderQueue.filter(function (order) {
					return order.target.name === highTarget.name && order.isBatch && order.batchID === 3;
				}).length;
				let maxBatch_time = Math.floor(highTarget.weakenTime / (4 * batchOffset));
				let maxBatch_lesser = Math.min(maxBatch_freeRam, maxBatch_time - existingBatch,
					maxBatchSize - existingBatch);
				//ns.print("Ram: "+maxBatch_freeRam+" Time: "+(maxBatch_time - existingBatch)+" Size: "+(maxBatchSize - existingBatch) +" Existing: "+existingBatch);


				if (maxBatch_lesser <= 0) {
					nextOrderID = startOrderID;
					if (freeRamThreads > 0 && !anyHighTargetOrder) {
						ord.isBatch = false;
						ord.delay = 0;
						ord.threads = Math.min(freeRamThreads, threads);
						ord.neededThreads = ord.threads;
						nextOrderID++;
						return Promise.resolve(new Array(ord)); //return the Order object
					}
				} else {
					for (let i = 0; i < maxBatch_lesser; i++) {
						let w1 = JSON.parse(JSON.stringify(addweak1));
						w1.delay += i * (batchOffset * 4);
						w1.id += i * 4;
						w1.batchID = 1;
						let w2 = JSON.parse(JSON.stringify(addweak2));
						w2.delay += i * (batchOffset * 4);
						w2.id += i * 4;
						w2.batchID = 3;
						nextOrderID = w2.id + 1;
						let g = JSON.parse(JSON.stringify(addgrow));
						g.delay += i * (batchOffset * 4);
						g.id += i * 4;
						g.batchID = 2;
						let h = JSON.parse(JSON.stringify(ord));
						h.delay += i * (batchOffset * 4);
						h.id += i * 4;
						h.batchID = 0;
						orderBatch.push(h);
						orderBatch.push(g);
						orderBatch.push(w2);
						orderBatch.push(w1);
					}
					return Promise.resolve(orderBatch);
				}

			}
		}
		return Promise.resolve(promise);

	}
	async function UpdateServers() {
		await ns.run("/scanall.ns");
		ImportServers = JSON.parse(ns.read("serverlist.txt"));
		servers = ImportServers.filter(function (server) {
			return !exclude.includes(server.name) && !server.name.startsWith(namedServerPrefix);
		});
	}
	function getFreeRamThreads() {
		return ImportServers.filter(function (server) {
			return server.hasRoot && server.maxRam > 0;
		})
			.map(server => Math.floor((server.maxRam - (server.name === "home" ? 64 : 0) - ns.getServerUsedRam(server.name)) / weakenSize))
			.reduce((p, c) => p + c);
	}
}
export class Order {
	target = "";
	threads = 0;
	secThresh = 0;
	id = 0;
	type = ""; //h, g, w
	neededThreads = 0;
	delay = 0;
	batchID = 0;
	isBatch = false;
	constructor(cid, ctarget, cthreads, csecThresh, ctype) {
		this.id = cid;
		this.target = ctarget;
		this.threads = cthreads;
		this.secThresh = csecThresh;
		this.type = ctype;
		this.neededThreads = this.threads;
	}
}