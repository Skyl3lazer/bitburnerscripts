/** @param {NS} ns **/
export async function main(ns) {
    ns.disableLog("ALL");
    ns.tail();
    var portData;
    var threads;
    var id;
    var orders = ns.getPortHandle(1);
    var accept = ns.getPortHandle(2);
    var output = ns.getPortHandle(3);
    var tasks = new Array();

    //script sizes
    let hackSize = 1.7;
    let weakenSize = 1.75;
    let growSize = 1.75;

    var ImportServers = JSON.parse(ns.read("serverlist.txt"));
    var myServers = ImportServers.filter(function (server) {
        return server.hasRoot && server.maxRam > 0;
    });
    for (let host of myServers) {
        await ns.scp("/hack/weaken.ns", host.name);
        await ns.scp("/hack/grow.ns", host.name);
        await ns.scp("/hack/hack.ns", host.name);
    }
    while (true) {
        portData = orders.read();
        while (portData === "NULL PORT DATA") {
            await CheckCompleted();
            await ns.sleep(3500);
            portData = orders.read();
        }
        portData = JSON.parse(portData);
        portData.pids = new Array();
        id = portData.id;
        var neededThreads = portData.neededThreads;
        let assignedThreads = 0;
        for (let host of myServers) {
            host.freemem = host.maxRam - ns.getServerUsedRam(host.name);
            if (host.name === "home") {
                host.freemem -= 64;
            }
            if (neededThreads === 0) {
                continue;
            }
            let availThreads = 0;
            if (portData.type === "w") {
                availThreads = Math.floor(host.freemem / weakenSize);
                if (availThreads > neededThreads) {
                    availThreads = neededThreads;
                }
                if (availThreads > 0) {
                    neededThreads -= availThreads;
                    let pid = ns.exec("/hack/weaken.ns", host.name, availThreads, portData.target.name);
                    portData.pids.push([host.name, pid, availThreads]);
                    assignedThreads += availThreads;
                    host.freemem = host.maxRam - (availThreads * weakenSize);
                }
            } else if (portData.type === "h") {
                availThreads = Math.floor(host.freemem / hackSize);
                if (availThreads > neededThreads) {
                    availThreads = neededThreads;
                }

                if (availThreads > 0) {
                    neededThreads -= availThreads;
                    let pid = ns.exec("/hack/hack.ns", host.name, availThreads, portData.target.name);
                    portData.pids.push([host.name, pid, availThreads]);
                    assignedThreads += availThreads;
                    host.freemem = host.maxRam - (availThreads * hackSize);
                }
            } else if (portData.type === "g") {
                availThreads = Math.floor(host.freemem / growSize);
                if (availThreads > neededThreads) {
                    availThreads = neededThreads;
                }

                if (availThreads > 0) {
                    neededThreads -= availThreads;
                    let pid = ns.exec("/hack/grow.ns", host.name, availThreads, portData.target.name);
                    portData.pids.push([host.name, pid, availThreads]);
                    assignedThreads += availThreads;
                    host.freemem = host.maxRam - (availThreads * growSize);
                }
            }
        };
        myServers.sort(function (a, b) {
            return a.freemem - b.freemem;
        });



        //report completed tasks
        await CheckCompleted();

		let startingNeed = portData.neededThreads;
        portData.neededThreads = neededThreads;

        let taskLoc = tasks.findIndex(element => element.id === portData.id);
        if (taskLoc >= 0) {
            tasks.splice(taskLoc, 1, portData);
        } else {
            tasks.push(portData);
        }

        //report accepted task
        let squak = new AcceptSquak();
        squak.id = id;
        squak.startedThreads = assignedThreads;
        let writeFlag = false;
        while (!writeFlag) {
            writeFlag = await accept.tryWrite(JSON.stringify(squak));
            await ns.sleep(50);
        }
        if (squak.startedThreads > 0) {
            ns.print("Squaked accepted task " + squak.id + " with threads: " + squak.startedThreads + "/" + startingNeed +" Needed: " +portData.neededThreads);
        }

        await ns.sleep(1);
    }
    async function CheckCompleted() {
        for (let task of tasks) {
            if (task.pids === undefined || task.pids.length === 0) {
                continue;
            }
            var anyRunning = false;
            for (let proc of task.pids) {
                let running = false;
                if (ns.isRunning(proc[1], proc[0])) {
                    running = true;
                    anyRunning = true;
                }

                if (!running) {
                    let compSquak = new ReturnSquak();
                    task.target.growTime = ns.getGrowTime(task.target.name);
                    task.target.weakenTime = ns.getWeakenTime(task.target.name);
                    task.target.hackTime = ns.getHackTime(task.target.name);
                    task.target.money = ns.getServerMoneyAvailable(task.target.name);
                    task.target.security = ns.getServerSecurityLevel(task.target.name);
                    compSquak.server = task.target;
                    compSquak.id = task.id;
                    compSquak.threads = proc[2];
                    let writeFlag = false;
                    while (!writeFlag) {
                        writeFlag = await output.tryWrite(JSON.stringify(compSquak));
                        await ns.sleep(50);
                    }
                    ns.print("Squaked task " + compSquak.id + " completed " + proc[2] + " threads on: " + proc[0]);
                    task.pids.splice(task.pids.indexOf(proc), 1);
                }
            }
            if (task.neededThreads === 0 && task.pids.length === 0) {
                ns.print("All threads for task " + task.id + " completed. Index: " + tasks.findIndex(element => element.id === task.id));
                tasks.splice(tasks.findIndex(element => element.id === task.id), 1);
            }
        }
    }

}

class AcceptSquak {
    id = 0;
    startedThreads = 0;
}
class ReturnSquak {
    server = "";
    id = 0;
    threads = 0;
}